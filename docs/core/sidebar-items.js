initSidebarItems({"macro":[["Clone","Derive macro generating an impl of the trait `Clone`."],["Copy","Derive macro generating an impl of the trait `Copy`."],["Debug","Derive macro generating an impl of the trait `Debug`."],["Default","Derive macro generating an impl of the trait `Default`."],["Eq","Derive macro generating an impl of the trait `Eq`."],["Hash","Derive macro generating an impl of the trait `Hash`."],["Ord","Derive macro generating an impl of the trait `Ord`."],["PartialEq","Derive macro generating an impl of the trait `PartialEq`."],["PartialOrd","Derive macro generating an impl of the trait `PartialOrd`."],["RustcDecodable","Unstable implementation detail of the `rustc` compiler, do not use."],["RustcEncodable","Unstable implementation detail of the `rustc` compiler, do not use."],["asm","内联汇编"],["assert","运行时断言布尔表达式在为 `true`"],["assert_eq","断言两个表达式彼此相等（使用 [`PartialEq`]）"],["assert_ne","断言两个表达式彼此不相等（使用[`PartialEq`]）"],["bench","Attribute macro applied to a function to turn it into a benchmark test."],["cfg","在编译时评估配置标志的布尔组合"],["column","扩展为调用它的列号"],["compile_error","当导致编译失败时,给定的错误消息"],["concat","Concatenates literals into a static string slice."],["concat_idents","将多个标识符连接成一个标识符"],["debug_assert","运行时断言布尔表达式在为 `true`"],["debug_assert_eq","断言两个表达式彼此相等"],["debug_assert_ne","断言两个表达式彼此不相等"],["env","在编译时检查环境变量."],["file","扩展为调用它的文件名"],["format_args","字符串格式宏的构造参数"],["format_args_nl","与format_args相同，但最后添加一个换行符"],["global_allocator","Attribute macro applied to a static to register it as a global allocator."],["global_asm","模块级内联汇编"],["include","根据上下文将文件解析为表达式或项"],["include_bytes","包含一个文件，作为对字节数组的引用"],["include_str","包含一个utf8编码的文件作为字符串"],["line","Expands to the line number on which it was invoked."],["log_syntax","将传递的令牌打印到标准输出中"],["matches","返回与任何给定模式匹配的表达式 Returns whether the given expression matches any of the given patterns."],["module_path","扩展为表示当前模块路径的字符串"],["option_env","可选的在编译时检查环境变量。"],["panic","恐慌/Panics当前线程"],["stringify","对其参数进行字符串化"],["test","Attribute macro applied to a function to turn it into a unit test."],["test_case","An implementation detail of the `#[test]` and `#[bench]` macros."],["todo","表示未完成的代码"],["trace_macros","启用或禁用用于调试其他宏的跟踪功能"],["try","展开`result`或传播其错误"],["unimplemented","Panic并显示“尚未实现”信息，表示未完成的代码"],["unreachable","表示无法访问的代码"],["write","将格式化的数据写入缓冲区"],["writeln","将格式化的数据写入缓冲区并换行"]],"mod":[["alloc","内存分配APIs"],["any","该模块实现了`Any`特质，该特质允许通过运行时反射来动态键入任何`'static` 类型"],["arch","SIMD and vendor intrinsics module."],["array","定长数组的 `Eq` 之类的实现. 限制到一定长度。 最终我们应该能够扩展到所有长度。"],["ascii","ASCII字符串和字符的操作"],["borrow","用于处理借入(`borrowed`)数据的模块"],["cell","共享可变容器"],["char","字符类型"],["clone","无法`隐式复制`类型的`Clone`特质"],["cmp","排序和比较的功能"],["convert","类型之间转换的特质"],["default","类型的默认值可能具有意义的`Default`特质"],["f32","该模块提供特定于`f32`浮点数据类型实现的常量"],["f64","该模块提供特定于`f64`浮点数据类型实现的常量"],["ffi","FFI绑定有关的实用工具"],["fmt","格式化和打印 String的实用工具"],["future","异步值"],["hash","通用哈希支持"],["hint","对编译器的提示，该提示会影响应如何发出或优化代码"],["i128","128位带符号整数类型"],["i16","16位带符号整数类型"],["i32","32位带符号整数类型"],["i64","64位带符号整数类型"],["i8","8位带符号整数类型"],["intrinsics","Compiler intrinsics."],["isize","指针大小的有符号整数类型"],["iter","可组合外部迭代"],["marker","原始特质和类型的类型基本属性表现"],["mem","处理内存的基本功能"],["num","内置数字类型的数字特质和函数"],["ops","可重载运算符"],["option","可选值"],["panic","标准库中的恐慌/故障支持"],["panicking","`libcore` 的`Panic`支持"],["pin","将数据固定到其在内存中位置的类型"],["prelude","Rust `libcore` 前导"],["ptr","Manually manage memory through raw pointers."],["raw","包含用于编译器内置类型布局的结构定义"],["result","`Result` 类型错误处理"],["slice","切片管理和操作"],["str","字符串操作"],["sync","同步原语"],["task","用于处理异步任务的类型和特质"],["time","时间量化"],["u128","128位无符号整数类型"],["u16","16位无符号整数类型"],["u32","32位无符号整数类型"],["u64","64位无符号整数类型"],["u8","8位无符号整数类型"],["unicode",""],["usize","指针大小的无符号整数类型"]]});