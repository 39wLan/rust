initSidebarItems({"keyword":[["Self","含有[`trait`]  或 [`impl`]  块的实现类型, 或含有类型定义的当前类型"],["as","类型间转换，或重命名导入"],["async","返回 [`Future`] 而不是阻塞当前线程"],["await","暂停执行，直到 [`Future`] 准备好结果"],["break","从循环中提前退出"],["const","编译时常量和确定性函数"],["continue","跳到循环的下一个迭代"],["crate","Rust二进制文件或库"],["dyn","命名[特质对象]的类型"],["else","当[`if`]  条件不成立时该怎么办"],["enum","一种类型，可以是多种变体中的任何一种"],["extern","链接到或导入外部代码"],["false","一个[`bool`] 表示逻辑 false的类型的值"],["fn","函数或函数指针"],["for","Iteration with [`in`], trait implementation with [`impl`], or [higher-ranked trait bounds] (`for<'a>`)."],["if","如果条件成立，则执行块"],["impl","为类型实现一些功能"],["in","与[`for`]使用迭代一系列值"],["let","将值绑定到变量"],["loop","无限循环"],["match","基于模式匹配的控制流"],["mod","将代码组织到[模块]中."],["move","通过值捕获[闭包]环境"],["mut","可变的绑定，引用或指针"],["pub","使其可见"],["ref","在模式匹配期间按引用绑定"],["return","从函数返回值"],["self","方法的接收者，或当前模块"],["static","在程序期间有效。"],["struct","由其他类型组成的类型"],["super","当前[模块]的父级"],["trait","一类类型的通用接口"],["true","一个 [`bool`] 表示逻辑 true的类型的值"],["type","为现有类型定义别名"],["union","Rust中相当于C风格的 [union]."],["unsafe","类型系统无法验证其[内存安全] 性的代码或接口"],["use","从其他 `Crate` 或模块导入或重命名项"],["where","添加使用项必须保持的约束。"],["while","符合条件时循环"]],"macro":[["asm","内联汇编"],["assert","运行时断言布尔表达式在为 `true`"],["assert_eq","断言两个表达式彼此相等（使用 [`PartialEq`]）"],["assert_ne","断言两个表达式彼此不相等（使用[`PartialEq`]）"],["cfg","在编译时评估配置标志的布尔组合"],["column","扩展为调用它的列号"],["compile_error","当导致编译失败时,给定的错误消息"],["concat","Concatenates literals into a static string slice."],["concat_idents","将多个标识符连接成一个标识符"],["dbg","打印并返回给定表达式的值，以进行快速和脏调试"],["debug_assert","运行时断言布尔表达式在为 `true`"],["debug_assert_eq","断言两个表达式彼此相等"],["debug_assert_ne","断言两个表达式彼此不相等"],["env","在编译时检查环境变量."],["eprint","打印到标准错误"],["eprintln","打印到标准错误并换行"],["file","扩展为调用它的文件名"],["format","Creates a `String` using interpolation of runtime expressions."],["format_args","字符串格式宏的构造参数"],["format_args_nl","与format_args相同，但最后添加一个换行符"],["global_asm","模块级内联汇编"],["include","根据上下文将文件解析为表达式或项"],["include_bytes","包含一个文件，作为对字节数组的引用"],["include_str","包含一个utf8编码的文件作为字符串"],["is_aarch64_feature_detected","Prevents compilation if `is_aarch64_feature_detected` is used somewhere else than `aarch64` targets."],["is_arm_feature_detected","Prevents compilation if `is_arm_feature_detected` is used somewhere else than `ARM` targets."],["is_mips64_feature_detected","Prevents compilation if `is_mips64_feature_detected` is used somewhere else than `MIPS64` targets."],["is_mips_feature_detected","Prevents compilation if `is_mips_feature_detected` is used somewhere else than `MIPS` targets."],["is_powerpc64_feature_detected","Prevents compilation if `is_powerpc64_feature_detected` is used somewhere else than `PowerPC64` targets."],["is_powerpc_feature_detected","Prevents compilation if `is_powerpc_feature_detected` is used somewhere else than `PowerPC` targets."],["is_x86_feature_detected","A macro to test at runtime whether a CPU feature is available on x86/x86-64 platforms."],["line","Expands to the line number on which it was invoked."],["log_syntax","将传递的令牌打印到标准输出中"],["matches","返回与任何给定模式匹配的表达式 Returns whether the given expression matches any of the given patterns."],["module_path","扩展为表示当前模块路径的字符串"],["option_env","可选的在编译时检查环境变量。"],["panic","Panics the current thread."],["print","打印到标准输出"],["println","打印到标准错误并换行"],["stringify","对其参数进行字符串化"],["thread_local","Declare a new thread local storage key of type [`std::thread::LocalKey`]."],["todo","表示未完成的代码"],["trace_macros","启用或禁用用于调试其他宏的跟踪功能"],["try","展开`result`或传播其错误"],["unimplemented","Panic并显示“尚未实现”信息，表示未完成的代码"],["unreachable","表示无法访问的代码"],["vec","Creates a [`Vec`] containing the arguments."],["write","将格式化的数据写入缓冲区"],["writeln","将格式化的数据写入缓冲区并换行"]],"mod":[["alloc","内存分配APIs"],["any","该模块实现了`Any`特质，该特质允许通过运行时反射来动态键入任何`'static` 类型"],["array","定长数组的 `Eq` 之类的实现. 限制到一定长度。 最终我们应该能够扩展到所有长度。"],["ascii","ASCII字符串和字符的操作"],["backtrace","支持捕获OS线程的堆栈回溯"],["borrow","A module for working with borrowed data."],["boxed","A pointer type for heap allocation."],["cell","共享可变容器"],["char","字符类型"],["clone","无法`隐式复制`类型的`Clone`特质"],["cmp","排序和比较的功能"],["collections","集合类型"],["convert","类型之间转换的特质"],["default","类型的默认值可能具有意义的`Default`特质"],["env","检查和管理进程的环境"],["error","处理错误的特质"],["f32","该模块提供特定于`f32`浮点数据类型实现的常量"],["f64","该模块提供特定于`f64`浮点数据类型实现的常量"],["ffi","格式化和打印 String的实用工具"],["fmt","Utilities for formatting and printing `String`s."],["fs","文件系统管理操作"],["future","异步值"],["hash","通用哈希支持"],["hint","对编译器的提示，该提示会影响应如何发出或优化代码"],["i128","128位带符号整数类型"],["i16","16位带符号整数类型"],["i32","32位带符号整数类型"],["i64","64位带符号整数类型"],["i8","8位带符号整数类型"],["intrinsics","Compiler intrinsics."],["io","核心 I / O功能的特质，帮助程序和类型定义"],["isize","指针大小的有符号整数类型"],["iter","可组合外部迭代"],["marker","原始特质和类型的类型基本属性表现"],["mem","处理内存的基本功能"],["net","`TCP/UDP` 通信的网络原语"],["num","数字的附加功能"],["ops","可重载运算符"],["option","可选值"],["os","特定于操作系统的功能"],["panic","标准库中的恐慌/故障支持"],["path","跨平台路径操作"],["pin","将数据固定到其在内存中位置的类型"],["prelude","Rust前导"],["process","进程处理模块"],["ptr","Manually manage memory through raw pointers."],["raw","包含用于编译器内置类型布局的结构定义"],["rc","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["result","`Result` 类型错误处理"],["slice","A dynamically-sized view into a contiguous sequence, `[T]`."],["str","Unicode string slices."],["string","A UTF-8 encoded, growable string."],["sync","有用的同步原语"],["task","Types and Traits for working with asynchronous tasks."],["thread","原生线程"],["time","时间量化"],["u128","128位无符号整数类型"],["u16","16位无符号整数类型"],["u32","32位无符号整数类型"],["u64","64位无符号整数类型"],["u8","8位无符号整数类型"],["usize","指针大小的无符号整数类型"],["vec","A contiguous growable array type with heap-allocated contents, written `Vec<T>`."]],"primitive":[["array","一个固定大小的数组, 表示为`[T; N]`，即元素类型`T`, 和非负编译时常量`N`."],["bool","布尔类型"],["char","字符类型"],["f32","32位浮点类型"],["f64","64位浮点类型"],["fn","函数指针，如  `fn(usize) -> bool`."],["i128","128位带符号整数类型"],["i16","16位带符号整数类型"],["i32","32位带符号整数类型"],["i64","64位带符号整数类型"],["i8","8位带符号整数类型"],["isize","指针大小的有符号整数类型"],["never","`!` 类型，也被称为\"永不\""],["pointer","原始的，不安全的指针`*const T`, 和 `*mut T`."],["reference","共享和可变引用"],["slice","具有动态尺寸视图的连续序列`[T]` "],["str","字符切片"],["tuple","有限的异构序列`(T, U, ..)`."],["u128","128位无符号整数类型"],["u16","16位无符号整数类型"],["u32","32位无符号整数类型"],["u64","64位无符号整数类型"],["u8","8位无符号整数类型"],["unit","`()` 类型，有时被称为\"单元\" 或 \"无\""],["usize","指针大小的无符号整数类型"]]});